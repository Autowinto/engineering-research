{
  "repo_name": "django/django",
  "commits": [
    {
      "sha": "fc303551077c3e023fe4f9d01fc1b3026c816fa4",
      "message": "Fixed #36198 -- Implemented unresolved transform expression replacement.\n\nThis allows the proper resolving of F(\"field__transform\") when\nperforming constraint validation.\n\nThanks Tom Hall for the report and Sarah for the test.",
      "changes": [
        {
          "file": "tests/constraints/models.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -73,6 +73,7 @@ class UniqueConstraintProduct(models.Model):\n     name = models.CharField(max_length=255)\n     color = models.CharField(max_length=32, null=True)\n     age = models.IntegerField(null=True)\n+    updated = models.DateTimeField(null=True)\n \n     class Meta:\n         constraints = ["
        }
      ]
    },
    {
      "sha": "240421c7c4c81fe5df26274b807266bd4ca73d7f",
      "message": "Fixed #36186 -- Added forloop.length variable within a template for loop.",
      "changes": [
        {
          "file": "django/template/defaulttags.py",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -206,7 +206,10 @@ def render(self, context):\n             unpack = num_loopvars > 1\n             # Create a forloop value in the context.  We'll update counters on each\n             # iteration just below.\n-            loop_dict = context[\"forloop\"] = {\"parentloop\": parentloop}\n+            loop_dict = context[\"forloop\"] = {\n+                \"parentloop\": parentloop,\n+                \"length\": len_values,\n+            }\n             for i, item in enumerate(values):\n                 # Shortcuts for current loop iteration number.\n                 loop_dict[\"counter0\"] = i"
        }
      ]
    },
    {
      "sha": "51cab4ad51616f8fdb050631be5c710b93685ec3",
      "message": "Fixed #35705 -- Added Rotate GIS database function to rotate geometries.",
      "changes": [
        {
          "file": "django/contrib/gis/db/backends/base/operations.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -62,6 +62,7 @@ def select_extent(self):\n         \"Perimeter\",\n         \"PointOnSurface\",\n         \"Reverse\",\n+        \"Rotate\",\n         \"Scale\",\n         \"SnapToGrid\",\n         \"SymDifference\","
        },
        {
          "file": "django/contrib/gis/db/backends/mysql/operations.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -98,6 +98,7 @@ def unsupported_functions(self):\n             \"Perimeter\",\n             \"PointOnSurface\",\n             \"Reverse\",\n+            \"Rotate\",\n             \"Scale\",\n             \"SnapToGrid\",\n             \"Transform\","
        },
        {
          "file": "django/contrib/gis/db/backends/oracle/operations.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -129,6 +129,7 @@ class OracleOperations(BaseSpatialOperations, DatabaseOperations):\n         \"LineLocatePoint\",\n         \"MakeValid\",\n         \"MemSize\",\n+        \"Rotate\",\n         \"Scale\",\n         \"SnapToGrid\",\n         \"Translate\","
        },
        {
          "file": "django/contrib/gis/db/backends/spatialite/operations.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -82,7 +82,7 @@ class SpatiaLiteOperations(BaseSpatialOperations, DatabaseOperations):\n \n     @cached_property\n     def unsupported_functions(self):\n-        unsupported = {\"GeometryDistance\", \"IsEmpty\", \"MemSize\"}\n+        unsupported = {\"GeometryDistance\", \"IsEmpty\", \"MemSize\", \"Rotate\"}\n         if not self.geom_lib_version():\n             unsupported |= {\"Azimuth\", \"GeoHash\", \"MakeValid\"}\n         if self.spatial_version < (5, 1):"
        }
      ]
    },
    {
      "sha": "f7017db92cee1536c014710f475a613792c1e4b5",
      "message": "Fixed #35839 -- Fixed crash when adding GeneratedField with db_comment on MySQL.\n\nThanks Simon Charette for the test.\n\nSigned-off-by: saJaeHyukc <wogur981208@gmail.com>",
      "changes": [
        {
          "file": "django/db/backends/base/schema.py",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -313,8 +313,6 @@ def _iter_column_sql(\n         yield column_db_type\n         if collation := field_db_params.get(\"collation\"):\n             yield self._collate_sql(collation)\n-        if self.connection.features.supports_comments_inline and field.db_comment:\n-            yield self._comment_sql(field.db_comment)\n         # Work out nullability.\n         null = field.null\n         # Add database default.\n@@ -373,6 +371,8 @@ def _iter_column_sql(\n             and field.unique\n         ):\n             yield self.connection.ops.tablespace_sql(tablespace, inline=True)\n+        if self.connection.features.supports_comments_inline and field.db_comment:\n+            yield self._comment_sql(field.db_comment)\n \n     def column_sql(self, model, field, include_default=False):\n         \"\"\""
        }
      ]
    },
    {
      "sha": "7500044a825b3e6695f4f0f9e56d5bdc0c5d7988",
      "message": "Refs #35167 -- Fixed test_bulk_update_custom_get_prep_value() crash on databases that don't support primitives in JSONFields.\n\nFor example on Oracle < 21c.",
      "changes": [
        {
          "file": "tests/model_fields/models.py",
          "additions": 4,
          "deletions": 1,
          "patch": "@@ -438,7 +438,10 @@ def get_prep_value(self, value):\n     json_field = StringifiedJSONField()\n \n     class Meta:\n-        required_db_features = {\"supports_json_field\"}\n+        required_db_features = {\n+            \"supports_json_field\",\n+            \"supports_primitives_in_json_field\",\n+        }\n \n \n class AllFieldsModel(models.Model):"
        },
        {
          "file": "tests/model_fields/test_jsonfield.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -304,6 +304,7 @@ def test_realistic_object(self):\n         obj.refresh_from_db()\n         self.assertEqual(obj.value, value)\n \n+    @skipUnlessDBFeature(\"supports_primitives_in_json_field\")\n     def test_bulk_update_custom_get_prep_value(self):\n         objs = CustomSerializationJSONModel.objects.bulk_create(\n             [CustomSerializationJSONModel(pk=1, json_field={\"version\": \"1\"})]"
        }
      ]
    },
    {
      "sha": "65c46d6932c0956d2988d13ec3d9ab3ef9d96d61",
      "message": "Fixed #35358, Refs #35234 -- Renamed _check() methods to check() for constraints.",
      "changes": [
        {
          "file": "django/contrib/postgres/constraints.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -76,7 +76,7 @@ def _get_expressions(self, schema_editor, query):\n             expressions.append(expression)\n         return ExpressionList(*expressions).resolve_expression(query)\n \n-    def _check(self, model, connection):\n+    def check(self, model, connection):\n         references = set()\n         for expr, _ in self.expressions:\n             if isinstance(expr, str):"
        },
        {
          "file": "django/db/models/base.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -2458,7 +2458,7 @@ def _check_constraints(cls, databases):\n                 continue\n             connection = connections[db]\n             for constraint in cls._meta.constraints:\n-                errors.extend(constraint._check(cls, connection))\n+                errors.extend(constraint.check(cls, connection))\n         return errors\n \n "
        },
        {
          "file": "django/db/models/constraints.py",
          "additions": 3,
          "deletions": 3,
          "patch": "@@ -66,7 +66,7 @@ def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n     def get_violation_error_message(self):\n         return self.violation_error_message % {\"name\": self.name}\n \n-    def _check(self, model, connection):\n+    def check(self, model, connection):\n         return []\n \n     def _check_references(self, model, references):\n@@ -147,7 +147,7 @@ def __init__(\n             violation_error_message=violation_error_message,\n         )\n \n-    def _check(self, model, connection):\n+    def check(self, model, connection):\n         errors = []\n         if not (\n             connection.features.supports_table_check_constraints\n@@ -332,7 +332,7 @@ def __init__(\n     def contains_expressions(self):\n         return bool(self.expressions)\n \n-    def _check(self, model, connection):\n+    def check(self, model, connection):\n         errors = model._check_local_fields({*self.fields, *self.include}, \"constraints\")\n         required_db_features = model._meta.required_db_features\n         if self.condition is not None and not ("
        }
      ]
    },
    {
      "sha": "c3a23aa02faa1cf1d32e43d66858e793cd9ecac4",
      "message": "Fixed #36197 -- Fixed improper many-to-many count() and exists() for non-pk to_field.\n\nRegression in 66e47ac69a7e71cf32eee312d05668d8f1ba24bb.\n\nThanks mfontana-elem for the report and Sarah for the tests.",
      "changes": [
        {
          "file": "django/db/models/fields/related_descriptors.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1172,7 +1172,7 @@ def constrained_target(self):\n                 return None\n             hints = {\"instance\": self.instance}\n             manager = self.through._base_manager.db_manager(db, hints=hints)\n-            filters = {self.source_field_name: self.instance.pk}\n+            filters = {self.source_field_name: self.related_val[0]}\n             # Nullable target rows must be excluded as well as they would have\n             # been filtered out from an INNER JOIN.\n             if self.target_field.null:"
        },
        {
          "file": "tests/m2m_through/tests.py",
          "additions": 8,
          "deletions": 0,
          "patch": "@@ -533,3 +533,11 @@ def test_choices(self):\n             [choice[0] for choice in field.get_choices(include_blank=False)],\n             [\"pea\", \"potato\", \"tomato\"],\n         )\n+\n+    def test_count(self):\n+        self.assertEqual(self.curry.ingredients.count(), 3)\n+        self.assertEqual(self.tomato.recipes.count(), 1)\n+\n+    def test_exists(self):\n+        self.assertTrue(self.curry.ingredients.exists())\n+        self.assertTrue(self.tomato.recipes.exists())"
        }
      ]
    },
    {
      "sha": "727731d76d9dfd5304d536478d862778f6dd6d9b",
      "message": "Fixed #36179 -- Unhexed entries and removed duplicates in auth/common-passwords.txt.gz.",
      "changes": [
        {
          "file": "django/contrib/auth/password_validation.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -222,7 +222,7 @@ class CommonPasswordValidator:\n \n     The password is rejected if it occurs in a provided list of passwords,\n     which may be gzipped. The list Django ships with contains 20000 common\n-    passwords (lowercased and deduplicated), created by Royce Williams:\n+    passwords (unhexed, lowercased and deduplicated), created by Royce Williams:\n     https://gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce\n     The password list must be lowercased to match the comparison in validate().\n     \"\"\""
        },
        {
          "file": "tests/auth_tests/test_validators.py",
          "additions": 9,
          "deletions": 0,
          "patch": "@@ -273,6 +273,15 @@ def test_validate(self):\n             CommonPasswordValidator().validate(\"godzilla\")\n         self.assertEqual(cm.exception.messages, [expected_error])\n \n+    def test_common_hexed_codes(self):\n+        expected_error = \"This password is too common.\"\n+        common_hexed_passwords = [\"asdfjkl:\", \"&#2336:\"]\n+        for password in common_hexed_passwords:\n+            with self.subTest(password=password):\n+                with self.assertRaises(ValidationError) as cm:\n+                    CommonPasswordValidator().validate(password)\n+                self.assertEqual(cm.exception.messages, [expected_error])\n+\n     def test_validate_custom_list(self):\n         path = os.path.join(\n             os.path.dirname(os.path.realpath(__file__)), \"common-passwords-custom.txt\""
        }
      ]
    },
    {
      "sha": "0d1dd6bba0c18b7feb6caa5cbd8df80fbac54afd",
      "message": "Fixed #36191 -- Truncated the overwritten file content in FileSystemStorage.",
      "changes": [
        {
          "file": "django/core/files/storage/filesystem.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -113,7 +113,7 @@ def _save(self, name, content):\n                         | getattr(os, \"O_BINARY\", 0)\n                     )\n                     if self._allow_overwrite:\n-                        open_flags = open_flags & ~os.O_EXCL\n+                        open_flags = open_flags & ~os.O_EXCL | os.O_TRUNC\n                     fd = os.open(full_path, open_flags, 0o666)\n                     _file = None\n                     try:"
        }
      ]
    },
    {
      "sha": "dc69a63f844b2ef3bc3371edde91644cf0bef0ee",
      "message": "Fixed #35967 -- Deferred test suite fixtures serialization after all dbs setup.\n\nWhile the top-level objects fed to serialization are bound to the test\ndatabase being created nothing prevents code invoked during\nserialization from performing queries against other connections entries\nthat haven't been swapped yet.\n\nThe reported example of that is a database router directing all reads to\na test mirror for a set of models involving auto-created many-to-many\nfields. It might be tempting to address the many-to-many field case but\nthis a symptom of a larger problem where the test framework yields the\nflow execution to user code that could interact with non-test databases\nin unexpected ways.\n\nDeferring test database fixture serialization until the point where all\nconnections entries have been swapped for their test equivalent ensures\nthat no code triggered during serialization can interact with non-test\ndatabases.\n\nThanks Jake Howard for the report and Jacob Walls for the initial\ninvestigation.",
      "changes": [
        {
          "file": "django/db/backends/dummy/base.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -39,6 +39,7 @@ class DatabaseClient(BaseDatabaseClient):\n class DatabaseCreation(BaseDatabaseCreation):\n     create_test_db = ignore\n     destroy_test_db = ignore\n+    serialize_db_to_string = ignore\n \n \n class DatabaseIntrospection(BaseDatabaseIntrospection):"
        },
        {
          "file": "tests/test_runner/tests.py",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -931,8 +931,9 @@ def test_serialization(self):\n             with mock.patch(\"django.test.utils.connections\", new=tested_connections):\n                 self.runner_instance.setup_databases()\n         mocked_db_creation.return_value.create_test_db.assert_called_once_with(\n-            verbosity=0, autoclobber=False, serialize=True, keepdb=False\n+            verbosity=0, autoclobber=False, serialize=False, keepdb=False\n         )\n+        mocked_db_creation.return_value.serialize_db_to_string.assert_called_once_with()\n \n \n @skipUnlessDBFeature(\"supports_sequence_reset\")"
        }
      ]
    },
    {
      "sha": "eb70aafdba18ac30e53056162c32ee6c21dea0b4",
      "message": "Reverted \"Fixed #35803 -- Added support for Collect, GeoHash, and IsValid on MariaDB 11.7+.\"\n\nThis reverts commit c77573716a58af32ffcfc4fe87ff9e5c97909bd2.\n\nMariaDB reverted GIS functions.",
      "changes": [
        {
          "file": "django/contrib/gis/db/backends/mysql/operations.py",
          "additions": 2,
          "deletions": 6,
          "patch": "@@ -73,10 +73,7 @@ def disallowed_aggregates(self):\n             models.Union,\n         ]\n         is_mariadb = self.connection.mysql_is_mariadb\n-        if is_mariadb:\n-            if self.connection.mysql_version < (11, 7):\n-                disallowed_aggregates.insert(0, models.Collect)\n-        elif self.connection.mysql_version < (8, 0, 24):\n+        if is_mariadb or self.connection.mysql_version < (8, 0, 24):\n             disallowed_aggregates.insert(0, models.Collect)\n         return tuple(disallowed_aggregates)\n \n@@ -110,8 +107,7 @@ def unsupported_functions(self):\n         }\n         if self.connection.mysql_is_mariadb:\n             unsupported.remove(\"PointOnSurface\")\n-            if self.connection.mysql_version < (11, 7):\n-                unsupported.update({\"GeoHash\", \"IsValid\"})\n+            unsupported.update({\"GeoHash\", \"IsValid\"})\n         return unsupported\n \n     def geo_db_type(self, f):"
        }
      ]
    },
    {
      "sha": "8561100425876bde3be4b2a22324655f74ff9609",
      "message": "Fixed #36181 -- Allowed Subquery usage in __in lookups against composite pks.\n\nThanks Jacob Walls for the report.",
      "changes": [
        {
          "file": "django/db/models/fields/tuple_lookups.py",
          "additions": 8,
          "deletions": 2,
          "patch": "@@ -2,7 +2,13 @@\n \n from django.core.exceptions import EmptyResultSet\n from django.db.models import Field\n-from django.db.models.expressions import ColPairs, Func, ResolvedOuterRef, Value\n+from django.db.models.expressions import (\n+    ColPairs,\n+    Func,\n+    ResolvedOuterRef,\n+    Subquery,\n+    Value,\n+)\n from django.db.models.lookups import (\n     Exact,\n     GreaterThan,\n@@ -301,7 +307,7 @@ def check_rhs_elements_length_equals_lhs_length(self):\n             )\n \n     def check_rhs_is_query(self):\n-        if not isinstance(self.rhs, Query):\n+        if not isinstance(self.rhs, (Query, Subquery)):\n             lhs_str = self.get_lhs_str()\n             rhs_cls = self.rhs.__class__.__name__\n             raise ValueError("
        },
        {
          "file": "tests/composite_pk/test_filter.py",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -442,6 +442,11 @@ def test_cannot_cast_pk(self):\n         with self.assertRaisesMessage(ValueError, msg):\n             Comment.objects.filter(text__gt=Cast(F(\"pk\"), TextField())).count()\n \n+    def test_explicit_subquery(self):\n+        subquery = Subquery(User.objects.values(\"pk\"))\n+        self.assertEqual(User.objects.filter(pk__in=subquery).count(), 4)\n+        self.assertEqual(Comment.objects.filter(user__in=subquery).count(), 5)\n+\n     def test_filter_case_when(self):\n         msg = \"When expression does not support composite primary keys.\"\n         with self.assertRaisesMessage(ValueError, msg):"
        }
      ]
    },
    {
      "sha": "47c837a1ff96ef1b10b44477a7a9f72283d12e83",
      "message": "Refs #23919 -- Removed Python 2 workaround in fixtures_regress.\n\nThis reverts commit 7e19641b0359c23105cc27eebd9ccb1963546f2a.",
      "changes": [
        {
          "file": "tests/fixtures_regress/tests.py",
          "additions": 0,
          "deletions": 6,
          "patch": "@@ -1,7 +1,6 @@\n # Unittests for fixtures.\n import json\n import os\n-import re\n import unittest\n from io import StringIO\n from pathlib import Path\n@@ -425,11 +424,6 @@ def test_dumpdata_uses_default_manager(self):\n \n         # Output order isn't guaranteed, so check for parts\n         data = out.getvalue()\n-\n-        # Get rid of artifacts like '000000002' to eliminate the differences\n-        # between different Python versions.\n-        data = re.sub(\"0{6,}[0-9]\", \"\", data)\n-\n         animals_data = sorted(\n             [\n                 {"
        }
      ]
    },
    {
      "sha": "41239fe34d64e801212dccaa4585e4802d0fac68",
      "message": "Fixed #36149 -- Allowed subquery values against tuple exact and in lookups.\n\nNon-tuple exact and in lookups have specialized logic for subqueries that can\nbe adapted to properly assign select mask if unspecified and ensure the number\nof involved members are matching on both side of the operator.",
      "changes": [
        {
          "file": "django/db/models/expressions.py",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1367,6 +1367,9 @@ def relabeled_clone(self, relabels):\n     def resolve_expression(self, *args, **kwargs):\n         return self\n \n+    def select_format(self, compiler, sql, params):\n+        return sql, params\n+\n \n class Ref(Expression):\n     \"\"\""
        },
        {
          "file": "django/db/models/query.py",
          "additions": 0,
          "deletions": 4,
          "patch": "@@ -1958,10 +1958,6 @@ def _merge_known_related_objects(self, other):\n             self._known_related_objects.setdefault(field, {}).update(objects)\n \n     def resolve_expression(self, *args, **kwargs):\n-        if self._fields and len(self._fields) > 1:\n-            # values() queryset can only be used as nested queries\n-            # if they are set up to select only a single field.\n-            raise TypeError(\"Cannot use multi-field values as a filter value.\")\n         query = self.query.resolve_expression(*args, **kwargs)\n         query._db = self._db\n         return query"
        },
        {
          "file": "django/db/models/sql/query.py",
          "additions": 6,
          "deletions": 0,
          "patch": "@@ -1224,6 +1224,12 @@ def add_annotation(self, annotation, alias, select=True):\n         if self.selected:\n             self.selected[alias] = alias\n \n+    @property\n+    def _subquery_fields_len(self):\n+        if self.has_select_fields:\n+            return len(self.selected)\n+        return len(self.model._meta.pk_fields)\n+\n     def resolve_expression(self, query, *args, **kwargs):\n         clone = self.clone()\n         # Subqueries need to use a different set of aliases than the outer query."
        },
        {
          "file": "tests/composite_pk/models/tenant.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -44,6 +44,7 @@ class Comment(models.Model):\n         related_name=\"comments\",\n     )\n     text = models.TextField(default=\"\", blank=True)\n+    integer = models.IntegerField(default=0)\n \n \n class Post(models.Model):"
        },
        {
          "file": "tests/composite_pk/tests.py",
          "additions": 3,
          "deletions": 6,
          "patch": "@@ -109,13 +109,10 @@ def test_pk_must_have_2_elements(self):\n \n     def test_composite_pk_in_fields(self):\n         user_fields = {f.name for f in User._meta.get_fields()}\n-        self.assertEqual(user_fields, {\"pk\", \"tenant\", \"id\", \"email\", \"comments\"})\n+        self.assertTrue({\"pk\", \"tenant\", \"id\"}.issubset(user_fields))\n \n         comment_fields = {f.name for f in Comment._meta.get_fields()}\n-        self.assertEqual(\n-            comment_fields,\n-            {\"pk\", \"tenant\", \"id\", \"user_id\", \"user\", \"text\"},\n-        )\n+        self.assertTrue({\"pk\", \"tenant\", \"id\"}.issubset(comment_fields))\n \n     def test_pk_field(self):\n         pk = User._meta.get_field(\"pk\")\n@@ -174,7 +171,7 @@ def test_only(self):\n             self.assertEqual(user.email, self.user.email)\n \n     def test_model_forms(self):\n-        fields = [\"tenant\", \"id\", \"user_id\", \"text\"]\n+        fields = [\"tenant\", \"id\", \"user_id\", \"text\", \"integer\"]\n         self.assertEqual(list(CommentForm.base_fields), fields)\n \n         form = modelform_factory(Comment, fields=\"__all__\")"
        }
      ]
    },
    {
      "sha": "4a3ad9eebbc16ce80b348644b557c84ecc741be7",
      "message": "Fixed #36148 -- Enabled native tuple comparison lookups on SQLite 3.37+ and Oracle 23.4+.\n\nVALUES must be explicitly specified when declaring a sequence of tuples\non SQLite < 3.37 but it's not required on >= 3.37.\n\nSee sqlite/sqlite@9289f51 which addressed the last remaining issue with\nIN.",
      "changes": [
        {
          "file": "django/db/backends/oracle/features.py",
          "additions": 5,
          "deletions": 1,
          "patch": "@@ -80,7 +80,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     allows_multiple_constraints_on_same_fields = False\n     supports_json_field_contains = False\n     supports_collation_on_textfield = False\n-    supports_tuple_lookups = False\n     test_now_utc_template = \"CURRENT_TIMESTAMP AT TIME ZONE 'UTC'\"\n     django_test_expected_failures = {\n         # A bug in Django/oracledb with respect to string handling (#23843).\n@@ -217,3 +216,8 @@ def supports_aggregation_over_interval_types(self):\n     @cached_property\n     def bare_select_suffix(self):\n         return \"\" if self.connection.oracle_version >= (23,) else \" FROM DUAL\"\n+\n+    @cached_property\n+    def supports_tuple_lookups(self):\n+        # Support is known to be missing on 23.2 but available on 23.4.\n+        return self.connection.oracle_version >= (23, 4)"
        },
        {
          "file": "django/db/backends/sqlite3/features.py",
          "additions": 0,
          "deletions": 1,
          "patch": "@@ -61,7 +61,6 @@ class DatabaseFeatures(BaseDatabaseFeatures):\n     insert_test_table_with_defaults = 'INSERT INTO {} (\"null\") VALUES (1)'\n     supports_default_keyword_in_insert = False\n     supports_unlimited_charfield = True\n-    supports_tuple_lookups = False\n \n     @cached_property\n     def django_test_skips(self):"
        }
      ]
    },
    {
      "sha": "17160819f3d98a6355bfd608fe756a43cba33343",
      "message": "Fixed #36105 -- Dropped support for MariaDB 10.5.",
      "changes": [
        {
          "file": "tests/backends/mysql/tests.py",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -106,8 +106,8 @@ class Tests(TestCase):\n     @mock.patch.object(connection, \"get_database_version\")\n     def test_check_database_version_supported(self, mocked_get_database_version):\n         if connection.mysql_is_mariadb:\n-            mocked_get_database_version.return_value = (10, 4)\n-            msg = \"MariaDB 10.5 or later is required (found 10.4).\"\n+            mocked_get_database_version.return_value = (10, 5)\n+            msg = \"MariaDB 10.6 or later is required (found 10.5).\"\n         else:\n             mocked_get_database_version.return_value = (8, 0, 4)\n             msg = \"MySQL 8.0.11 or later is required (found 8.0.4).\""
        }
      ]
    },
    {
      "sha": "089deb82b9ac2d002af36fd36f288368cdac4b53",
      "message": "Fixed #36025 -- Fixed re-aliasing of iterable (in/range) lookups rhs.\n\nIn order for Expression.relabeled_clone to work appropriately its\nget_source_expressions method must return all resolvable which wasn't the case\nfor Lookup when its right-hand-side is \"direct\" (not a compilable).\n\nWhile refs #22288 added support for non-literals iterable right-hand-side\nlookups it predated the subclassing of Lookup(Expression) refs #27021 which\ncould have been an opportunity to ensure right-hand-sides are always resolvable\n(ValueList and ExpressionList).\n\nAddressing all edge case with non-resolvable right-hand-sides would require\na significant refactor and deprecation of some parts of the Lookup interface so\nthis patch only focuses on FieldGetDbPrepValueIterableMixin (In and Range\nlookups) by making sure that a right-hand-side containing resolvables are dealt\nwith appropriately during the resolving phase.\n\nThanks Aashay Amballi for the report.",
      "changes": [
        {
          "file": "tests/model_fields/test_jsonfield.py",
          "additions": 2,
          "deletions": 1,
          "patch": "@@ -13,6 +13,7 @@\n     OperationalError,\n     connection,\n     models,\n+    transaction,\n )\n from django.db.models import (\n     Count,\n@@ -974,7 +975,7 @@ def test_key_in(self):\n             (\"value__i__in\", [False, \"foo\"], [self.objs[4]]),\n         ]\n         for lookup, value, expected in tests:\n-            with self.subTest(lookup=lookup, value=value):\n+            with self.subTest(lookup=lookup, value=value), transaction.atomic():\n                 self.assertCountEqual(\n                     NullableJSONModel.objects.filter(**{lookup: value}),\n                     expected,"
        }
      ]
    },
    {
      "sha": "b13b8684a04d0bc1081104c5973c62c27dc673b0",
      "message": "Fixed #36061 -- Added migration support for ManyToManyField.through_fields.\n\nAdded through_fields support to ManyToManyField.deconstruct.\nThanks to Simon Charette for pointers and the review.",
      "changes": [
        {
          "file": "django/db/models/fields/related.py",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -1796,6 +1796,8 @@ def deconstruct(self):\n                 kwargs[\"through\"] = self.remote_field.through\n             elif not self.remote_field.through._meta.auto_created:\n                 kwargs[\"through\"] = self.remote_field.through._meta.label\n+        if through_fields := getattr(self.remote_field, \"through_fields\", None):\n+            kwargs[\"through_fields\"] = through_fields\n         # If swappable is True, then see if we're actually pointing to the target\n         # of a swap.\n         swappable_setting = self.swappable_setting"
        }
      ]
    },
    {
      "sha": "2598b371a93e21d84b7a2a99b2329535c8c0c138",
      "message": "Fixed #35677 -- Avoided non-sticky filtering of prefetched many-to-many.\n\nThe original queryset._next_is_sticky() call never had the intended effect as\nno further filtering was applied internally after the pk__in lookup making it\na noop.\n\nIn order to be coherent with how related filters are applied when retrieving\nobjects from a related manager the effects of what calling _next_is_sticky()\nprior to applying annotations and filters to the queryset provided for\nprefetching are emulated by allowing the reuse of all pre-existing JOINs.\n\nThanks David Glenck and Thiago Bellini Ribeiro for the detailed reports and\ntests.",
      "changes": [
        {
          "file": "django/db/models/fields/related_descriptors.py",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -111,7 +111,10 @@ def _filter_prefetch_queryset(queryset, field_name, instances):\n         if high_mark is not None:\n             predicate &= LessThanOrEqual(window, high_mark)\n         queryset.query.clear_limits()\n-    return queryset.filter(predicate)\n+    # All pre-existing JOINs must be re-used when applying the predicate to\n+    # avoid unintended spanning of multi-valued relationships.\n+    queryset.query.add_q(predicate, reuse_all=True)\n+    return queryset\n \n \n class ForwardManyToOneDescriptor:\n@@ -1117,7 +1120,7 @@ def get_prefetch_querysets(self, instances, querysets=None):\n             queryset._add_hints(instance=instances[0])\n             queryset = queryset.using(queryset._db or self._db)\n             queryset = _filter_prefetch_queryset(\n-                queryset._next_is_sticky(), self.query_field_name, instances\n+                queryset, self.query_field_name, instances\n             )\n \n             # M2M: need to annotate the query in order to get the primary model"
        },
        {
          "file": "django/db/models/sql/query.py",
          "additions": 6,
          "deletions": 2,
          "patch": "@@ -1616,7 +1616,7 @@ def build_filter(\n     def add_filter(self, filter_lhs, filter_rhs):\n         self.add_q(Q((filter_lhs, filter_rhs)))\n \n-    def add_q(self, q_object):\n+    def add_q(self, q_object, reuse_all=False):\n         \"\"\"\n         A preprocessor for the internal _add_q(). Responsible for doing final\n         join promotion.\n@@ -1630,7 +1630,11 @@ def add_q(self, q_object):\n         existing_inner = {\n             a for a in self.alias_map if self.alias_map[a].join_type == INNER\n         }\n-        clause, _ = self._add_q(q_object, self.used_aliases)\n+        if reuse_all:\n+            can_reuse = set(self.alias_map)\n+        else:\n+            can_reuse = self.used_aliases\n+        clause, _ = self._add_q(q_object, can_reuse)\n         if clause:\n             self.where.add(clause, AND)\n         self.demote_joins(existing_inner)"
        },
        {
          "file": "tests/prefetch_related/models.py",
          "additions": 1,
          "deletions": 0,
          "patch": "@@ -35,6 +35,7 @@ class FavoriteAuthors(models.Model):\n     likes_author = models.ForeignKey(\n         Author, models.CASCADE, to_field=\"name\", related_name=\"likes_me\"\n     )\n+    is_active = models.BooleanField(default=True)\n \n     class Meta:\n         ordering = [\"id\"]"
        }
      ]
    }
  ]
}