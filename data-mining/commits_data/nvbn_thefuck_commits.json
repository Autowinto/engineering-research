{
  "repo_name": "nvbn/thefuck",
  "commits": [
    {
      "sha": "62e0767c5069aeee176b0fe3459068b7703aaa26",
      "message": "#N/A: Fix a couple of issues after new flake8 release",
      "changes": [
        {
          "file": "tests/rules/test_ssh_known_host.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -1,6 +1,6 @@\n import os\n import pytest\n-from thefuck.rules.ssh_known_hosts import match, get_new_command,\\\n+from thefuck.rules.ssh_known_hosts import match, get_new_command, \\\n     side_effect\n from thefuck.types import Command\n "
        },
        {
          "file": "tests/test_readme.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -8,5 +8,5 @@ def test_readme(source_root):\n \n         for rule in bundled:\n             if rule.stem != '__init__':\n-                assert rule.stem in readme,\\\n+                assert rule.stem in readme, \\\n                     'Missing rule \"{}\" in README.md'.format(rule.stem)"
        }
      ]
    },
    {
      "sha": "617aaa1fd07271d0b370e56efd307827c085eb7c",
      "message": "#1248: Skip a failing test when running on Windows",
      "changes": [
        {
          "file": "tests/output_readers/test_rerun.py",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -1,5 +1,7 @@\n # -*- encoding: utf-8 -*-\n \n+import pytest\n+import sys\n from mock import Mock, patch\n from psutil import AccessDenied, TimeoutExpired\n \n@@ -30,6 +32,7 @@ def test_get_output_invalid_continuation_byte(self, popen_mock):\n         actual = rerun.get_output('', '')\n         assert actual == expected\n \n+    @pytest.mark.skipif(sys.platform == 'win32', reason=\"skip when running on Windows\")\n     @patch('thefuck.output_readers.rerun._wait_output')\n     def test_get_output_unicode_misspell(self, wait_output_mock):\n         rerun.get_output(u'p\u00e1cman', u'p\u00e1cman')"
        }
      ]
    },
    {
      "sha": "f1b7d879bdfc712c14de1e40f00c52ed4a0437dd",
      "message": "#1290: Update output for brew_update_formula\n\n* fix: brew_update_formula change output string\r\n\r\n* fix: regex removed, test: backtick added\r\n\r\n* Update tests/rules/test_brew_update_formula.py\r\n\r\n* Update thefuck/rules/brew_update_formula.py\r\n\r\nCo-authored-by: Pablo Aguiar <scorphus@gmail.com>",
      "changes": [
        {
          "file": "tests/rules/test_brew_update_formula.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -4,7 +4,7 @@\n \n \n output = (\"Error: This command updates brew itself, and does not take formula\"\n-          \" names.\\nUse 'brew upgrade thefuck'.\")\n+          \" names.\\nUse `brew upgrade thefuck`.\")\n \n \n def test_match():"
        },
        {
          "file": "thefuck/rules/brew_update_formula.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n def match(command):\n     return ('update' in command.script\n             and \"Error: This command updates brew itself\" in command.output\n-            and \"Use 'brew upgrade\" in command.output)\n+            and \"Use `brew upgrade\" in command.output)\n \n \n def get_new_command(command):"
        }
      ]
    },
    {
      "sha": "16eb823066407a4115bb129ac3fce1872c16dc6b",
      "message": "#1261: Add two more patterns to sudo rule (#1307)\n\n* macos shutdown sudo fix\r\n\r\n* Update tests/rules/test_sudo.py\r\n\r\n* Update thefuck/rules/sudo.py\r\n\r\n* Update tests/rules/test_sudo.py\r\n\r\n* Update thefuck/rules/sudo.py\r\n\r\nCo-authored-by: Pablo Aguiar <scorphus@gmail.com>",
      "changes": [
        {
          "file": "tests/rules/test_sudo.py",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -10,6 +10,8 @@\n     'requested operation requires superuser privilege',\n     'need to be root',\n     'need root',\n+    'shutdown: NOT super-user',\n+    'Error: This command has to be run with superuser privileges (under the root user on most systems).',\n     'must be root',\n     'You don\\'t have access to the history DB.',\n     \"error: [Errno 13] Permission denied: '/usr/local/lib/python2.7/dist-packages/ipaddr.py'\"])"
        },
        {
          "file": "thefuck/rules/sudo.py",
          "additions": 2,
          "deletions": 0,
          "patch": "@@ -4,6 +4,8 @@\n             'you cannot perform this operation unless you are root',\n             'non-root users cannot',\n             'operation not permitted',\n+            'not super-user',\n+            'superuser privilege',\n             'root privilege',\n             'this command has to be run under the root user.',\n             'this operation requires root.',"
        }
      ]
    },
    {
      "sha": "cf1beb6b89cfcefb594f40a0d698da2b1ee94955",
      "message": "fix: Add missing comma\n\n* Add missing comma in a test",
      "changes": [
        {
          "file": "tests/rules/test_remove_shell_prompt_literal.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -13,7 +13,7 @@ def output():\n     [\n         \"$ cd newdir\",\n         \" $ cd newdir\",\n-        \"$ $ cd newdir\"\n+        \"$ $ cd newdir\",\n         \" $ $ cd newdir\",\n     ],\n )"
        }
      ]
    },
    {
      "sha": "0f4a523dc4cab990641131a7aac90b67bf7fb5fc",
      "message": "Encapsulate force_command in _get_raw_command\n\nUsing the `force_command` argument will run into issues as the\n`_get_raw_command` method simply returns the value of `force_command`\n(which is a string) while it should actually return a list.\n\nFix #1240",
      "changes": [
        {
          "file": "tests/entrypoints/test_fix_command.py",
          "additions": 2,
          "deletions": 2,
          "patch": "@@ -5,8 +5,8 @@\n \n class TestGetRawCommand(object):\n     def test_from_force_command_argument(self):\n-        known_args = Mock(force_command=['git', 'brunch'])\n-        assert _get_raw_command(known_args) == ['git', 'brunch']\n+        known_args = Mock(force_command='git brunch')\n+        assert _get_raw_command(known_args) == ['git brunch']\n \n     def test_from_command_argument(self, os_environ):\n         os_environ['TF_HISTORY'] = None"
        },
        {
          "file": "thefuck/entrypoints/fix_command.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -12,7 +12,7 @@\n \n def _get_raw_command(known_args):\n     if known_args.force_command:\n-        return known_args.force_command\n+        return [known_args.force_command]\n     elif not os.environ.get('TF_HISTORY'):\n         return known_args.command\n     else:"
        }
      ]
    },
    {
      "sha": "51e4e8728098903a87fb6d1cd2083460d439f357",
      "message": "#1227: Make `git_support` support output-independent rules\n\nFix #1227",
      "changes": [
        {
          "file": "tests/specific/test_git.py",
          "additions": 3,
          "deletions": 2,
          "patch": "@@ -27,9 +27,10 @@ def fn(command):\n     ('ls', False),\n     ('cat git', False),\n     ('cat hub', False)])\n-def test_git_support_match(command, is_git):\n+@pytest.mark.parametrize('output', ['', None])\n+def test_git_support_match(command, is_git, output):\n     @git_support\n     def fn(command):\n         return True\n \n-    assert fn(Command(command, '')) == is_git\n+    assert fn(Command(command, output)) == is_git"
        },
        {
          "file": "thefuck/specific/git.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -14,7 +14,7 @@ def git_support(fn, command):\n         return False\n \n     # perform git aliases expansion\n-    if 'trace: alias expansion:' in command.output:\n+    if command.output and 'trace: alias expansion:' in command.output:\n         search = re.search(\"trace: alias expansion: ([^ ]*) => ([^\\n]*)\",\n                            command.output)\n         alias = search.group(1)"
        }
      ]
    },
    {
      "sha": "7b7c150bb7e86bf71523ec735f4e0cd7b68ddf5c",
      "message": "#697: Encode expanded script on Python 2\n\nFix #697",
      "changes": [
        {
          "file": "tests/output_readers/test_rerun.py",
          "additions": 5,
          "deletions": 0,
          "patch": "@@ -30,6 +30,11 @@ def test_get_output_invalid_continuation_byte(self, popen_mock):\n         actual = rerun.get_output('', '')\n         assert actual == expected\n \n+    @patch('thefuck.output_readers.rerun._wait_output')\n+    def test_get_output_unicode_misspell(self, wait_output_mock):\n+        rerun.get_output(u'p\u00e1cman', u'p\u00e1cman')\n+        wait_output_mock.assert_called_once()\n+\n     def test_wait_output_is_slow(self, settings):\n         assert rerun._wait_output(Mock(), True)\n         self.proc_mock.wait.assert_called_once_with(settings.wait_slow_command)"
        },
        {
          "file": "thefuck/output_readers/read_log.py",
          "additions": 3,
          "deletions": 0,
          "patch": "@@ -40,6 +40,9 @@ def _group_by_calls(log):\n \n \n def _get_script_group_lines(grouped, script):\n+    if six.PY2:\n+        script = script.encode('utf-8')\n+\n     parts = shlex.split(script)\n \n     for script_line, lines in reversed(grouped):"
        },
        {
          "file": "thefuck/output_readers/rerun.py",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -1,5 +1,6 @@\n import os\n import shlex\n+import six\n from subprocess import Popen, PIPE, STDOUT\n from psutil import AccessDenied, Process, TimeoutExpired\n from .. import logs\n@@ -53,6 +54,9 @@ def get_output(script, expanded):\n     env = dict(os.environ)\n     env.update(settings.env)\n \n+    if six.PY2:\n+        expanded = expanded.encode('utf-8')\n+\n     split_expand = shlex.split(expanded)\n     is_slow = split_expand[0] in settings.slow_commands if split_expand else False\n     with logs.debug_time(u'Call: {}; with env: {}; is slow: {}'.format("
        }
      ]
    },
    {
      "sha": "dbc435c0401c464b6bbb2059a77ec98a96d4fe06",
      "message": "#618: Fix git_push_without_commits rule\n\nThe rule was in a non-working state. And the tests needed some bit of\nsimplification. Certain degree of repetition is oftentimes a good thing.",
      "changes": [
        {
          "file": "thefuck/rules/git_push_without_commits.py",
          "additions": 3,
          "deletions": 5,
          "patch": "@@ -1,14 +1,12 @@\n import re\n+from thefuck.shells import shell\n from thefuck.specific.git import git_support\n \n-fix = u'git commit -m \"Initial commit.\" && {command}'\n-refspec_does_not_match = re.compile(r'src refspec \\w+ does not match any\\.')\n-\n \n @git_support\n def match(command):\n-    return bool(refspec_does_not_match.search(command.output))\n+    return bool(re.search(r\"src refspec \\w+ does not match any\", command.output))\n \n \n def get_new_command(command):\n-    return fix.format(command=command.script)\n+    return shell.and_('git commit -m \"Initial commit\"', command.script)"
        }
      ]
    },
    {
      "sha": "8e8c80c22757508cb54f5fb17c67a7fb925dd0e1",
      "message": "#1188: Remove only leading whitespace chars from script\n\nFix #1188",
      "changes": [
        {
          "file": "tests/test_types.py",
          "additions": 3,
          "deletions": 1,
          "patch": "@@ -143,7 +143,9 @@ def test_from_script_calls(self, Popen, settings, os_environ):\n         ([''], None),\n         (['', ''], None),\n         (['ls', '-la'], 'ls -la'),\n-        (['ls'], 'ls')])\n+        (['ls'], 'ls'),\n+        (['echo \\\\ '], 'echo \\\\ '),\n+        (['echo \\\\\\n'], 'echo \\\\\\n')])\n     def test_from_script(self, script, result):\n         if result:\n             assert Command.from_raw_script(script).script == result"
        },
        {
          "file": "thefuck/utils.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -344,4 +344,4 @@ def format_raw_script(raw_script):\n     else:\n         script = ' '.join(raw_script)\n \n-    return script.strip()\n+    return script.lstrip()"
        }
      ]
    },
    {
      "sha": "0668822abb6471c3f382ad19bb7f761ff79bea37",
      "message": "#1215: Remove redirection to stderr with the ^ character\n\nRedirection to standard error with the `^` character is disabled by\ndefault since Fish Shell version 3.3[1].\n\nFix #1214\n\n[1]: https://github.com/fish-shell/fish-shell/blob/master/CHANGELOG.rst#deprecations-and-removed-features-1",
      "changes": [
        {
          "file": "tests/shells/test_fish.py",
          "additions": 5,
          "deletions": 2,
          "patch": "@@ -87,8 +87,11 @@ def test_app_alias(self, shell):\n \n     def test_app_alias_alter_history(self, settings, shell):\n         settings.alter_history = True\n-        assert 'builtin history delete' in shell.app_alias('FUCK')\n-        assert 'builtin history merge' in shell.app_alias('FUCK')\n+        assert (\n+            'builtin history delete --exact --case-sensitive -- $fucked_up_command\\n'\n+            in shell.app_alias('FUCK')\n+        )\n+        assert 'builtin history merge\\n' in shell.app_alias('FUCK')\n         settings.alter_history = False\n         assert 'builtin history delete' not in shell.app_alias('FUCK')\n         assert 'builtin history merge' not in shell.app_alias('FUCK')"
        },
        {
          "file": "thefuck/shells/fish.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -52,7 +52,7 @@ def app_alias(self, alias_name):\n         if settings.alter_history:\n             alter_history = ('    builtin history delete --exact'\n                              ' --case-sensitive -- $fucked_up_command\\n'\n-                             '    builtin history merge ^ /dev/null\\n')\n+                             '    builtin history merge\\n')\n         else:\n             alter_history = ''\n         # It is VERY important to have the variables declared WITHIN the alias"
        }
      ]
    },
    {
      "sha": "711feb4df56c44561f4e6c347c5efb0fe3ab1a37",
      "message": "#1184: Improve + fix `git_main_master` rule",
      "changes": [
        {
          "file": "thefuck/rules/git_main_master.py",
          "additions": 6,
          "deletions": 4,
          "patch": "@@ -3,12 +3,14 @@\n \n @git_support\n def match(command):\n-    return \"'master'\" in command.output.lower() or \"'main'\" in command.output.lower()\n+    return \"'master'\" in command.output or \"'main'\" in command.output\n \n \n @git_support\n def get_new_command(command):\n-    if \"'master'\" in command.output.lower():\n+    if \"'master'\" in command.output:\n         return command.script.replace(\"master\", \"main\")\n-    else:\n-        return command.script.replace(\"main\", \"master\")\n+    return command.script.replace(\"main\", \"master\")\n+\n+\n+priority = 1200"
        }
      ]
    },
    {
      "sha": "fe1942866bb2cee93f750a97ee026508aa0b4fc6",
      "message": "#1133: Match commands with path prefixes in @for_app decorations\n\n* Resolve paths before checking app identity\r\n\r\nCommands entered with a path do not match is_app. I encountered this\r\nwhen working with a test for the rm_dir rule. This rule did not use the\r\n@for_app decorator, but when I migrated it, the test for \"./bin/hdfs..\"\r\nfailed because 'hdfs' was recognized as a command, while \"./bin/hdfs\"\r\nwas not.\r\n\r\nThis commit addresses the false negative by resolving path names in the\r\ncommand, via os.path.basename.\r\n\r\n* Remove paths from for_app invocations in rules\r\n\r\nI presume that the `./` in `./gradlew` was used here because thefuck\r\nwould not find an app match on just `gradlew`, and thus no fucks would\r\nbe given on the most common and idiomatic way of invoking gradlew.\r\n\r\nAfter 8faf9b1, thefuck does not distinguish between commands with\r\npaths and those without. Therefore, the tests for this rule are now\r\nbroken because thefuck strips paths from the _user_'s command, but not\r\nfrom the for_app decoration.\r\n\r\nThis commit addresses that problem by changing the for_app decoration to\r\nthis rule.",
      "changes": [
        {
          "file": "tests/test_utils.py",
          "additions": 4,
          "deletions": 0,
          "patch": "@@ -146,6 +146,8 @@ def test_get_all_matched_commands(stderr, result):\n \n @pytest.mark.usefixtures('no_memoize')\n @pytest.mark.parametrize('script, names, result', [\n+    ('/usr/bin/git diff', ['git', 'hub'], True),\n+    ('/bin/hdfs dfs -rm foo', ['hdfs'], True),\n     ('git diff', ['git', 'hub'], True),\n     ('hub diff', ['git', 'hub'], True),\n     ('hg diff', ['git', 'hub'], False)])\n@@ -155,6 +157,8 @@ def test_is_app(script, names, result):\n \n @pytest.mark.usefixtures('no_memoize')\n @pytest.mark.parametrize('script, names, result', [\n+    ('/usr/bin/git diff', ['git', 'hub'], True),\n+    ('/bin/hdfs dfs -rm foo', ['hdfs'], True),\n     ('git diff', ['git', 'hub'], True),\n     ('hub diff', ['git', 'hub'], True),\n     ('hg diff', ['git', 'hub'], False)])"
        },
        {
          "file": "thefuck/rules/gradle_no_task.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -5,7 +5,7 @@\n regex = re.compile(r\"Task '(.*)' (is ambiguous|not found)\")\n \n \n-@for_app('gradle', './gradlew')\n+@for_app('gradle', 'gradlew')\n def match(command):\n     return regex.findall(command.output)\n "
        },
        {
          "file": "thefuck/utils.py",
          "additions": 1,
          "deletions": 1,
          "patch": "@@ -180,7 +180,7 @@ def is_app(command, *app_names, **kwargs):\n         raise TypeError(\"got an unexpected keyword argument '{}'\".format(kwargs.keys()))\n \n     if len(command.script_parts) > at_least:\n-        return command.script_parts[0] in app_names\n+        return os.path.basename(command.script_parts[0]) in app_names\n \n     return False\n "
        }
      ]
    }
  ]
}