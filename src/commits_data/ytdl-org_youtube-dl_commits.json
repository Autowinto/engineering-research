{
  "repo_name": "ytdl-org/youtube-dl",
  "commits": [
    {
      "sha": "32f89de92b652bf246aa458a552c9bb397abef77",
      "message": "[YouTube] Update TVHTML5 client parameters\n* resolves #33078",
      "changes": [
        {
          "file": "youtube_dl/extractor/youtube.py",
          "patch": "@@ -122,7 +122,8 @@ class YoutubeBaseInfoExtractor(InfoExtractor):\n             'INNERTUBE_CONTEXT': {\n                 'client': {\n                     'clientName': 'TVHTML5',\n-                    'clientVersion': '7.20241201.18.00',\n+                    'clientVersion': '7.20250120.19.00',\n+                    'userAgent': 'Mozilla/5.0 (ChromiumStylePlatform) Cobalt/Version',\n                 },\n             },\n             'INNERTUBE_CONTEXT_CLIENT_NAME': 7,"
        }
      ]
    },
    {
      "sha": "1dc27e1c3bda9cb8f44b805c89918aa7d11ffcdc",
      "message": "[JSInterp] Make indexing error handling more conformant\n* by default TypeError -> undefined, else raise\n* set allow_undefined=True/False to override",
      "changes": [
        {
          "file": "youtube_dl/jsinterp.py",
          "patch": "@@ -672,14 +672,15 @@ def _operator(self, op, left_val, right_expr, expr, local_vars, allow_recursion)\n         except Exception as e:\n             raise self.Exception('Failed to evaluate {left_val!r:.50} {op} {right_val!r:.50}'.format(**locals()), expr, cause=e)\n \n-    def _index(self, obj, idx, allow_undefined=True):\n+    def _index(self, obj, idx, allow_undefined=None):\n         if idx == 'length' and isinstance(obj, list):\n             return len(obj)\n         try:\n             return obj[int(idx)] if isinstance(obj, list) else obj[compat_str(idx)]\n         except (TypeError, KeyError, IndexError) as e:\n-            if allow_undefined:\n-                # when is not allowed?\n+            # allow_undefined is None gives correct behaviour\n+            if allow_undefined or (\n+                    allow_undefined is None and not isinstance(e, TypeError)):\n                 return JS_Undefined\n             raise self.Exception('Cannot get index {idx!r:.100}'.format(**locals()), expr=repr(obj), cause=e)\n "
        }
      ]
    },
    {
      "sha": "af049e309bfa47141a9788cd1730dd50dad6176d",
      "message": "[JSInterp] Handle undefined, etc, passed to JS_RegExp and Exception",
      "changes": [
        {
          "file": "youtube_dl/jsinterp.py",
          "patch": "@@ -408,6 +408,7 @@ def __init__(self, code, objects=None):\n     class Exception(ExtractorError):\n         def __init__(self, msg, *args, **kwargs):\n             expr = kwargs.pop('expr', None)\n+            msg = str_or_none(msg, default='\"None\"')\n             if expr is not None:\n                 msg = '{0} in: {1!r:.100}'.format(msg.rstrip(), expr)\n             super(JSInterpreter.Exception, self).__init__(msg, *args, **kwargs)\n@@ -435,6 +436,7 @@ def __init__(self, pattern_txt, flags=0):\n                 flags, _ = self.regex_flags(flags)\n             # First, avoid https://github.com/python/cpython/issues/74534\n             self.__self = None\n+            pattern_txt = str_or_none(pattern_txt) or '(?:)'\n             self.__pattern_txt = pattern_txt.replace('[[', r'[\\[')\n             self.__flags = flags\n "
        }
      ]
    },
    {
      "sha": "974c7d7f349831cf32026ec57e75bc821843a07b",
      "message": "[compat] Fix inheriting from compat_collections_chain_map\n* see ytdl-org/youtube-dl#33079#issuecomment-2704038049",
      "changes": [
        {
          "file": "youtube_dl/compat.py",
          "patch": "@@ -3473,11 +3473,12 @@ def pop(self, k, *args):\n         def new_child(self, m=None, **kwargs):\n             m = m or {}\n             m.update(kwargs)\n-            return compat_collections_chain_map(m, *self.maps)\n+            # support inheritance !\n+            return type(self)(m, *self.maps)\n \n         @property\n         def parents(self):\n-            return compat_collections_chain_map(*(self.maps[1:]))\n+            return type(self)(*(self.maps[1:]))\n \n \n # compat_re_Pattern, compat_re_Match"
        }
      ]
    },
    {
      "sha": "673277e510ebd996b62a2fcc76169bf3cce29910",
      "message": "[YouTube] Fix 91b1569",
      "changes": [
        {
          "file": "youtube_dl/extractor/youtube.py",
          "patch": "@@ -3305,7 +3305,7 @@ def _extract_lockup_view_model(self, view_model):\n             return\n         return merge_dicts(self.url_result(\n             update_url_query('https://www.youtube.com/playlist', {'list': content_id}),\n-            ie=YoutubeTabIE, video_id=content_id), {\n+            ie=YoutubeTabIE.ie_key(), video_id=content_id), {\n                 'title': traverse_obj(view_model, (\n                     'metadata', 'lockupMetadataViewModel', 'title', 'content', T(compat_str))),\n                 'thumbnails': self._extract_thumbnails(view_model, ("
        }
      ]
    },
    {
      "sha": "1036478d130c5f2001eca2d7d12558abe601d933",
      "message": "[YouTube] Endure subtitle URLs are complete\n* WEB URLs are, MWEB not\n* resolves #33017",
      "changes": [
        {
          "file": "youtube_dl/extractor/youtube.py",
          "patch": "@@ -2435,6 +2435,7 @@ def process_subtitles():\n                 subtitles = {}\n                 for caption_track in traverse_obj(pctr, (\n                         'captionTracks', lambda _, v: v.get('baseUrl'))):\n+                    base_url = self._yt_urljoin(caption_track['baseUrl'])\n                     if not base_url:\n                         continue\n                     if caption_track.get('kind') != 'asr':"
        }
      ]
    },
    {
      "sha": "176fc2cb003b7a74f5781a64a4e1ce32e740c149",
      "message": "[YouTube] Avoid early crash if webpage can't be read\n* see issue #33013",
      "changes": [
        {
          "file": "youtube_dl/extractor/youtube.py",
          "patch": "@@ -1951,7 +1951,7 @@ def _real_extract(self, url):\n             pb_context = {'html5Preference': 'HTML5_PREF_WANTS'}\n \n             player_url = self._extract_player_url(webpage)\n-            ytcfg = self._extract_ytcfg(video_id, webpage)\n+            ytcfg = self._extract_ytcfg(video_id, webpage or '')\n             sts = self._extract_signature_timestamp(video_id, player_url, ytcfg)\n             if sts:\n                 pb_context['signatureTimestamp'] = sts"
        }
      ]
    },
    {
      "sha": "76ac69917ec76ba663da843795f46916831e6da9",
      "message": "[jsinterp] Further improve expression parsing (fix fd8242e)\nPasses tests from yt-dlp",
      "changes": [
        {
          "file": "youtube_dl/jsinterp.py",
          "patch": "@@ -804,16 +804,19 @@ def interpret_statement(self, stmt, local_vars, allow_recursion=100):\n             if op in ('+', '-'):\n                 # simplify/adjust consecutive instances of these operators\n                 undone = 0\n-                while len(separated) > 1 and not separated[-1].strip():\n+                separated = [s.strip() for s in separated]\n+                while len(separated) > 1 and not separated[-1]:\n                     undone += 1\n                     separated.pop()\n                 if op == '-' and undone % 2 != 0:\n                     right_expr = op + right_expr\n                 elif op == '+':\n-                    while len(separated) > 1 and separated[-1].strip() in self.OP_CHARS:\n+                    while len(separated) > 1 and set(separated[-1]) <= self.OP_CHARS:\n+                        right_expr = separated.pop() + right_expr\n+                    if separated[-1][-1:] in self.OP_CHARS:\n                         right_expr = separated.pop() + right_expr\n                 # hanging op at end of left => unary + (strip) or - (push right)\n-                left_val = separated[-1]\n+                left_val = separated[-1] if separated else ''\n                 for dm_op in ('*', '%', '/', '**'):\n                     bodmas = tuple(self._separate(left_val, dm_op, skip_delims=skip_delim))\n                     if len(bodmas) > 1 and not bodmas[-1].strip():"
        }
      ]
    },
    {
      "sha": "2eac0fa3799b3d027148341186a52fb5a6288473",
      "message": "[utils] Save `orig_msg` in `ExtractorError`",
      "changes": [
        {
          "file": "youtube_dl/utils.py",
          "patch": "@@ -2406,7 +2406,7 @@ def __init__(self, msg, tb=None, expected=False, cause=None, video_id=None):\n         \"\"\" tb, if given, is the original traceback (so that it can be printed out).\n         If expected is set, this is a normal error message and most likely not a bug in youtube-dl.\n         \"\"\"\n-\n+        self.orig_msg = msg\n         if sys.exc_info()[0] in (compat_urllib_error.URLError, socket.timeout, UnavailableVideoError):\n             expected = True\n         if video_id is not None:"
        }
      ]
    }
  ]
}