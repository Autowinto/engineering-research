{
  "repo_name": "home-assistant/core",
  "commits": [
    {
      "sha": "ed20947e30b25c50af47dc338ed9686c9eace346",
      "message": "Fix events without user in Bring integration (#140213)\n\nFix events without publicUserUuid",
      "changes": [
        {
          "file": "homeassistant/components/bring/event.py",
          "patch": "@@ -77,9 +77,12 @@ def _async_handle_event(self) -> None:\n             attributes = asdict(activity.content)\n \n             attributes[\"last_activity_by\"] = next(\n-                x.name\n-                for x in bring_list.users.users\n-                if x.publicUuid == activity.content.publicUserUuid\n+                (\n+                    x.name\n+                    for x in bring_list.users.users\n+                    if x.publicUuid == activity.content.publicUserUuid\n+                ),\n+                None,\n             )\n \n             self._trigger_event("
        }
      ]
    },
    {
      "sha": "a3e981f1489b1b9ce9f526cc5e985e50a313d34e",
      "message": "Fix version not always available in onewire (#140260)",
      "changes": [
        {
          "file": "homeassistant/components/onewire/onewirehub.py",
          "patch": "@@ -2,6 +2,7 @@\n \n from __future__ import annotations\n \n+import contextlib\n from datetime import datetime, timedelta\n import logging\n import os\n@@ -58,7 +59,7 @@ class OneWireHub:\n \n     owproxy: protocol._Proxy\n     devices: list[OWDeviceDescription]\n-    _version: str\n+    _version: str | None = None\n \n     def __init__(self, hass: HomeAssistant, config_entry: OneWireConfigEntry) -> None:\n         \"\"\"Initialize.\"\"\"\n@@ -74,7 +75,9 @@ def _initialize(self) -> None:\n         port = self._config_entry.data[CONF_PORT]\n         _LOGGER.debug(\"Initializing connection to %s:%s\", host, port)\n         self.owproxy = protocol.proxy(host, port)\n-        self._version = self.owproxy.read(protocol.PTH_VERSION).decode()\n+        with contextlib.suppress(protocol.OwnetError):\n+            # Version is not available on all servers\n+            self._version = self.owproxy.read(protocol.PTH_VERSION).decode()\n         self.devices = _discover_devices(self.owproxy)\n \n     async def initialize(self) -> None:"
        }
      ]
    },
    {
      "sha": "7cbcdbe6104136b9ba81adfefa934c1e33104f84",
      "message": "Log broad exception in Electricity Maps config flow (#140219)",
      "changes": [
        {
          "file": "homeassistant/components/co2signal/config_flow.py",
          "patch": "@@ -3,11 +3,11 @@\n from __future__ import annotations\n \n from collections.abc import Mapping\n+import logging\n from typing import Any\n \n from aioelectricitymaps import (\n     ElectricityMaps,\n-    ElectricityMapsError,\n     ElectricityMapsInvalidTokenError,\n     ElectricityMapsNoDataError,\n )\n@@ -36,6 +36,8 @@\n TYPE_SPECIFY_COORDINATES = \"specify_coordinates\"\n TYPE_SPECIFY_COUNTRY = \"specify_country_code\"\n \n+_LOGGER = logging.getLogger(__name__)\n+\n \n class ElectricityMapsConfigFlow(ConfigFlow, domain=DOMAIN):\n     \"\"\"Handle a config flow for Co2signal.\"\"\"\n@@ -158,7 +160,8 @@ async def _validate_and_create(\n                 errors[\"base\"] = \"invalid_auth\"\n             except ElectricityMapsNoDataError:\n                 errors[\"base\"] = \"no_data\"\n-            except ElectricityMapsError:\n+            except Exception:\n+                _LOGGER.exception(\"Unexpected error occurred while checking API key\")\n                 errors[\"base\"] = \"unknown\"\n             else:\n                 if self.source == SOURCE_REAUTH:"
        }
      ]
    },
    {
      "sha": "aa2a1fc5ef748b827eff6ef2f5797248a348332e",
      "message": "Fix not available source in Onkyo (#140175)",
      "changes": [
        {
          "file": "homeassistant/components/onkyo/media_player.py",
          "patch": "@@ -588,7 +588,7 @@ def process_update(self, update: tuple[str, str, Any]) -> None:\n             self._attr_volume_level = min(1, volume_level)\n         elif command in [\"muting\", \"audio-muting\"]:\n             self._attr_is_volume_muted = bool(value == \"on\")\n-        elif command in [\"selector\", \"input-selector\"]:\n+        elif command in [\"selector\", \"input-selector\"] and value != \"N/A\":\n             self._parse_source(value)\n             self._query_av_info_delayed()\n         elif command == \"hdmi-output-selector\":"
        }
      ]
    }
  ]
}